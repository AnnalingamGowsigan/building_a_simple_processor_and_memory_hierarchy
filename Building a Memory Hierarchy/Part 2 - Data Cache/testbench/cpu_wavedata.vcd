$date
	Tue Mar 08 13:09:02 2022
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module cpu_tb $end
$var wire 32 ! mem_writedata [31:0] $end
$var wire 1 " mem_write $end
$var wire 32 # mem_readdata [31:0] $end
$var wire 1 $ mem_read $end
$var wire 1 % mem_busywait $end
$var wire 6 & mem_address [5:0] $end
$var wire 1 ' WRITE $end
$var wire 8 ( REGOUT1 [7:0] $end
$var wire 8 ) READDATA [7:0] $end
$var wire 1 * READ $end
$var wire 32 + PC [31:0] $end
$var wire 1 , BUSYWAIT $end
$var wire 8 - ALURESULT [7:0] $end
$var reg 1 . CLK $end
$var reg 32 / INSTRUCTION [31:0] $end
$var reg 1 0 RESET $end
$scope module mycpu $end
$var wire 1 . CLK $end
$var wire 32 1 INSTRUCTION [31:0] $end
$var wire 1 0 RESET $end
$var wire 8 2 twosCompliment_1_result [7:0] $end
$var wire 1 3 jump_branch_selector_result $end
$var wire 1 4 ZERO $end
$var wire 3 5 WRITEREG [2:0] $end
$var wire 1 6 WRITEENABLE $end
$var wire 1 ' WRITE $end
$var wire 8 7 REGOUT2 [7:0] $end
$var wire 8 8 REGOUT1 [7:0] $end
$var wire 3 9 READREG2 [2:0] $end
$var wire 3 : READREG1 [2:0] $end
$var wire 8 ; READDATA [7:0] $end
$var wire 1 * READ $end
$var wire 8 < RD_IMMEDIATE [7:0] $end
$var wire 32 = PC [31:0] $end
$var wire 8 > OPCODE [7:0] $end
$var wire 8 ? MUX2_result [7:0] $end
$var wire 1 @ MUX2_SELECTOR_FOR_IMM $end
$var wire 8 A MUX1_result [7:0] $end
$var wire 1 B MUX1_SELECTOR_FOR_SUB $end
$var wire 1 C JUMP $end
$var wire 1 D ISBUSYWAIT $end
$var wire 8 E IMMEDIATE [7:0] $end
$var wire 8 F DATA_MEMORY_MUX_result [7:0] $end
$var wire 1 G DATA_MEMORY_MUX_SELECTOR $end
$var wire 1 , BUSYWAIT $end
$var wire 1 H BRANCH $end
$var wire 8 I ALURESULT [7:0] $end
$var wire 3 J ALUOP [2:0] $end
$scope module my_Control_unit $end
$var wire 1 D ISBUSYWAIT $end
$var wire 8 K OPCODE [7:0] $end
$var wire 1 , BUSYWAIT $end
$var reg 3 L ALUOP [2:0] $end
$var reg 1 G DATA_MEMORY_MUX_SELECTOR $end
$var reg 1 H ISBRANCH $end
$var reg 1 C ISJUMP $end
$var reg 1 B MUX1_SELECTOR $end
$var reg 1 @ MUX2_SELECTOR $end
$var reg 1 * READ $end
$var reg 1 ' WRITE $end
$var reg 1 6 WRITEENABLE $end
$upscope $end
$scope module my_DATA_MEMORY_MUX $end
$var wire 1 G mux_seletor $end
$var wire 8 M mux_result [7:0] $end
$var wire 8 N input1 [7:0] $end
$var wire 8 O input0 [7:0] $end
$upscope $end
$scope module my_MUX1 $end
$var wire 1 B mux_seletor $end
$var wire 8 P mux_result [7:0] $end
$var wire 8 Q input1 [7:0] $end
$var wire 8 R input0 [7:0] $end
$upscope $end
$scope module my_MUX2 $end
$var wire 8 S input0 [7:0] $end
$var wire 8 T input1 [7:0] $end
$var wire 1 @ mux_seletor $end
$var wire 8 U mux_result [7:0] $end
$upscope $end
$scope module my_PC $end
$var wire 1 . CLK $end
$var wire 1 D ISBUSYWAIT $end
$var wire 8 V RD_imm [7:0] $end
$var wire 1 0 RESET $end
$var wire 32 W nextAddress [31:0] $end
$var wire 32 X my_signextender_result [31:0] $end
$var wire 32 Y my_shiftleft_2_result [31:0] $end
$var wire 32 Z jump_branch_selector_result [31:0] $end
$var wire 1 3 jump_branch_selector $end
$var reg 32 [ PC [31:0] $end
$var reg 32 \ PC_reg [31:0] $end
$var reg 32 ] targetAddress [31:0] $end
$scope module my_mux2_1_forPC $end
$var wire 32 ^ input0 [31:0] $end
$var wire 32 _ input1 [31:0] $end
$var wire 1 3 mux_seletor $end
$var wire 32 ` mux_result [31:0] $end
$upscope $end
$scope module my_shiftleft_2 $end
$var wire 32 a OUT [31:0] $end
$var wire 32 b IN [31:0] $end
$upscope $end
$scope module my_signextender $end
$var wire 8 c unextended [7:0] $end
$var reg 32 d extended [31:0] $end
$upscope $end
$upscope $end
$scope module my_alu $end
$var wire 8 e DATA2 [7:0] $end
$var wire 3 f SELECT [2:0] $end
$var wire 8 g OR_result [7:0] $end
$var wire 8 h MULTIPLY_result [7:0] $end
$var wire 8 i FORWARD_result [7:0] $end
$var wire 8 j DATA1 [7:0] $end
$var wire 8 k AND_result [7:0] $end
$var wire 8 l ADD_result [7:0] $end
$var reg 8 m RESULT [7:0] $end
$var reg 1 4 ZERO $end
$scope module ADD_1 $end
$var wire 8 n DATA2 [7:0] $end
$var wire 8 o RESULT [7:0] $end
$var wire 8 p DATA1 [7:0] $end
$upscope $end
$scope module AND_1 $end
$var wire 8 q DATA2 [7:0] $end
$var wire 8 r RESULT [7:0] $end
$var wire 8 s DATA1 [7:0] $end
$upscope $end
$scope module FORWARD_1 $end
$var wire 8 t DATA2 [7:0] $end
$var wire 8 u RESULT [7:0] $end
$upscope $end
$scope module MULTIPLY_1 $end
$var wire 8 v DATA2 [7:0] $end
$var wire 8 w DATA1 [7:0] $end
$var reg 8 x RESULT [7:0] $end
$upscope $end
$scope module OR_1 $end
$var wire 8 y DATA2 [7:0] $end
$var wire 8 z RESULT [7:0] $end
$var wire 8 { DATA1 [7:0] $end
$upscope $end
$upscope $end
$scope module my_mux4_1 $end
$var wire 1 | input0 $end
$var wire 1 } input1 $end
$var wire 1 4 input2 $end
$var wire 1 ~ input3 $end
$var wire 1 H mux_seletor_branch $end
$var wire 1 C mux_seletor_jump $end
$var wire 1 3 mux_result $end
$upscope $end
$scope module my_reg_file $end
$var wire 1 . CLK $end
$var wire 8 !" IN [7:0] $end
$var wire 3 "" INADDRESS [2:0] $end
$var wire 8 #" OUT1 [7:0] $end
$var wire 3 $" OUT1ADDRESS [2:0] $end
$var wire 8 %" OUT2 [7:0] $end
$var wire 3 &" OUT2ADDRESS [2:0] $end
$var wire 1 0 RESET $end
$var wire 1 6 WRITE $end
$var wire 8 '" reg0 [7:0] $end
$var wire 8 (" reg1 [7:0] $end
$var wire 8 )" reg2 [7:0] $end
$var wire 8 *" reg3 [7:0] $end
$var wire 8 +" reg4 [7:0] $end
$var wire 8 ," reg5 [7:0] $end
$var wire 8 -" reg6 [7:0] $end
$var wire 8 ." reg7 [7:0] $end
$upscope $end
$scope module my_twosCompliment $end
$var wire 8 /" in [7:0] $end
$var wire 8 0" result [7:0] $end
$upscope $end
$upscope $end
$scope module mydata_memory $end
$var wire 1 . clock $end
$var wire 1 0 reset $end
$var wire 32 1" writedata [31:0] $end
$var wire 1 " write $end
$var wire 1 $ read $end
$var wire 6 2" address [5:0] $end
$var reg 1 % busywait $end
$var reg 1 3" readaccess $end
$var reg 32 4" readdata [31:0] $end
$var reg 1 5" writeaccess $end
$var integer 32 6" i [31:0] $end
$upscope $end
$scope module mydcache $end
$var wire 1 . CLK $end
$var wire 8 7" C_ADDRESS [7:0] $end
$var wire 1 * C_READ $end
$var wire 1 ' C_WRITE $end
$var wire 8 8" C_WRITEDATA [7:0] $end
$var wire 1 0 RESET $end
$var wire 1 9" isHit $end
$var wire 1 % mem_busywait $end
$var wire 32 :" mem_readdata [31:0] $end
$var wire 3 ;" tag [2:0] $end
$var wire 2 <" offset [1:0] $end
$var wire 1 =" isTagMatch $end
$var wire 3 >" index [2:0] $end
$var reg 1 , C_BUSYWAIT $end
$var reg 8 ?" C_READDATA [7:0] $end
$var reg 32 @" cache_datablock [31:0] $end
$var reg 1 A" cache_dirtybit $end
$var reg 3 B" cache_tag [2:0] $end
$var reg 1 C" cache_validbit $end
$var reg 6 D" mem_address [5:0] $end
$var reg 1 $ mem_read $end
$var reg 1 " mem_write $end
$var reg 32 E" mem_writedata [31:0] $end
$var reg 3 F" next_state [2:0] $end
$var reg 1 G" readaccess $end
$var reg 3 H" state [2:0] $end
$var reg 8 I" temp_C_READDATA [7:0] $end
$var reg 1 J" writeaccess $end
$var integer 32 K" j [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx K"
xJ"
bx I"
bx H"
xG"
bx F"
bx E"
bx D"
xC"
bx B"
xA"
bx @"
bx ?"
bx >"
x="
bx <"
bx ;"
bx :"
x9"
bx 8"
bx 7"
bx 6"
x5"
bx 4"
x3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
bx -"
bx ,"
bx +"
bx *"
bx )"
bx ("
bx '"
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
1~
1}
0|
bx {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
bx r
bx q
bx p
bx o
bx n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx00 a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx00 Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
xH
xG
bx F
bx E
xD
xC
xB
bx A
x@
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
x6
bx 5
04
x3
bx 2
bx 1
00
bx /
0.
bx -
x,
bx +
x*
bx )
bx (
x'
bx &
x%
x$
bx #
x"
bx !
$end
#20
0D
0,
0"
0$
b0 F"
05"
03"
0%
b100000000 6"
b0 H"
10
#30
b1000 K"
#40
1.
#50
b0 ."
b0 -"
b0 ,"
b0 +"
b0 *"
b0 )"
b0 ("
b0 '"
b0 +
b0 =
b0 [
b1000 K"
#60
b100 \
b100 ^
00
#70
b0 Y
b0 a
b0 X
b0 b
b0 d
b0 >
b0 5
b0 :
b1 9
b1001 E
b0 <
b0 V
b0 c
b0 K
b0 ""
b0 $"
b1 &"
b1001 T
b1001 /
b1001 1
#80
b100 W
b100 Z
b100 `
0J"
0G"
03
b1001 ?
b1001 U
b1001 e
b1001 n
b1001 q
b1001 t
b1001 v
b1001 y
0G
0*
0'
0H
0C
1@
0B
b0 J
b0 L
b0 f
16
0.
#90
b1 <"
b10 >"
b0 ;"
b1001 F
b1001 M
b1001 !"
b1001 -
b1001 I
b1001 O
b1001 m
b1001 7"
b0 A
b0 P
b0 S
b0x00x k
b0x00x r
bx1xx1 g
bx1xx1 z
b1001 i
b1001 u
b100 ]
b100 _
b0 (
b0 8
b0 j
b0 p
b0 s
b0 w
b0 {
b0 #"
b0 8"
b0 7
b0 R
b0 %"
b0 /"
#100
b1001 g
b1001 z
b0 k
b0 r
b0 2
b0 Q
b0 0"
#110
b1001 l
b1001 o
b0 h
b0 x
#120
1.
#130
b1001 '"
b100 +
b100 =
b100 [
#140
b1000 W
b1000 Z
b1000 `
b1000 \
b1000 ^
#150
b100 Y
b100 a
b1 X
b1 b
b1 d
b1 ?
b1 U
b1 e
b1 n
b1 q
b1 t
b1 v
b1 y
b1 5
b1 E
b1 <
b1 V
b1 c
b1 ""
b1 T
b1001 (
b1001 8
b1001 j
b1001 p
b1001 s
b1001 w
b1001 {
b1001 #"
b1001 8"
b10000000000000001 /
b10000000000000001 1
#160
b0 >"
b1 F
b1 M
b1 !"
b1 -
b1 I
b1 O
b1 m
b1 7"
b1 i
b1 u
b1 k
b1 r
0.
#170
b1100 ]
b1100 _
b1010 l
b1010 o
#180
b1001 h
b1001 x
#200
1.
#210
b1 ("
b1000 +
b1000 =
b1000 [
#220
b1100 W
b1100 Z
b1100 `
b1100 \
b1100 ^
#230
b0 Y
b0 a
b0 X
b0 b
b0 d
b1 A
b1 P
b1 S
b1010 >
b0 5
b0 <
b0 V
b0 c
b1010 K
b0 ""
b1 7
b1 R
b1 %"
b1 /"
b1010000000000000000000000001 /
b1010000000000000000000000001 1
#240
1J"
1D
1,
1'
0@
06
b11111111 2
b11111111 Q
b11111111 0"
0.
#250
b1 F"
09"
0D
0,
0C"
0A"
b0 B"
b0 @"
#259
1="
#260
b0 I"
#280
13"
1%
1D
1,
b0 &
b0 2"
b0 D"
1$
b1 F"
b1 H"
1.
#320
0.
#360
1.
#400
0.
#440
1.
#480
0.
#520
1.
#560
0.
#600
1.
#640
0.
#680
1.
bx00000000 #
bx00000000 4"
bx00000000 :"
#720
0.
#760
1.
#800
0.
#840
1.
#880
0.
#920
1.
#960
0.
#1000
1.
#1040
0.
#1079
bx0000000000000000 #
bx0000000000000000 4"
bx0000000000000000 :"
#1080
1.
#1120
0.
#1160
1.
#1200
0.
#1240
1.
#1280
0.
#1320
1.
#1360
0.
#1400
1.
#1440
0.
#1478
bx000000000000000000000000 #
bx000000000000000000000000 4"
bx000000000000000000000000 :"
#1480
1.
#1520
0.
#1560
1.
#1600
0.
#1640
1.
#1680
0.
#1720
1.
#1760
0.
#1800
1.
#1840
0.
#1877
b11 F"
03"
0%
b0 #
b0 4"
b0 :"
#1880
bx &
bx 2"
bx D"
0$
b0 F"
b11 H"
1.
#1900
0D
0,
19"
1C"
#1920
0.
#1960
b0 H"
1.
#1970
b1100 +
b1100 =
b1100 [
0J"
#1980
b10000 W
b10000 Z
b10000 `
b10000 \
b10000 ^
#1990
b1011 >
b1 :
b0 9
b0 E
b1011 K
b1 $"
b0 &"
b0 T
b1011000000000000000100000000 /
b1011000000000000000100000000 1
#2000
b0 ?
b0 U
b0 e
b0 n
b0 q
b0 t
b0 v
b0 y
1@
0.
#2010
b0 <"
b0 F
b0 M
b0 !"
b0 -
b0 I
b0 O
b0 m
b0 7"
b1001 A
b1001 P
b1001 S
b0 k
b0 r
b0 i
b0 u
b1 (
b1 8
b1 j
b1 p
b1 s
b1 w
b1 {
b1 #"
b1 8"
b1001 7
b1001 R
b1001 %"
b1001 /"
#2020
b1 g
b1 z
b11110111 2
b11110111 Q
b11110111 0"
#2030
b1 l
b1 o
b0 h
b0 x
#2040
1.
#2050
b10000 +
b10000 =
b10000 [
#2060
b10100 W
b10100 Z
b10100 `
b10100 \
b10100 ^
#2070
b1000 Y
b1000 a
b10 X
b10 b
b10 d
b1 ?
b1 U
b1 e
b1 n
b1 q
b1 t
b1 v
b1 y
b1000 >
b10 5
b0 :
b1 9
b1 E
b10 <
b10 V
b10 c
b1000 K
b10 ""
b0 $"
b1 &"
b1 T
b1000000000100000000000000001 /
b1000000000100000000000000001 1
#2080
b0 )
b0 ;
b0 N
b0 ?"
b1 <"
b0 F
b0 M
b0 !"
1G"
0D
0,
b1001 ?
b1001 U
b1001 e
b1001 n
b1001 q
b1001 t
b1001 v
b1001 y
b1 -
b1 I
b1 O
b1 m
b1 7"
b1 k
b1 r
1G
1*
0'
0@
16
b1 i
b1 u
0.
#2090
b1001 F
b1001 M
b1001 !"
b10 >"
b1 ?
b1 U
b1 e
b1 n
b1 q
b1 t
b1 v
b1 y
b1001 )
b1001 ;
b1001 N
b1001 ?"
b1001 -
b1001 I
b1001 O
b1001 m
b1001 7"
b1 A
b1 P
b1 S
b1001 I"
1A"
b100100000000 @"
b1001 g
b1001 z
b1001 i
b1001 u
b11100 ]
b11100 _
b1001 (
b1001 8
b1001 j
b1001 p
b1001 s
b1001 w
b1001 {
b1001 #"
b1001 8"
b1 7
b1 R
b1 %"
b1 /"
#2100
b1 F"
b0 >"
09"
b1 -
b1 I
b1 O
b1 m
b1 7"
0C"
0A"
b0 @"
b1 i
b1 u
b11111111 2
b11111111 Q
b11111111 0"
b1001 h
b1001 x
#2110
b0 F
b0 M
b0 !"
b0 )
b0 ;
b0 N
b0 ?"
19"
b0 F"
1C"
1A"
b100100000000 @"
b0 I"
b1010 l
b1010 o
#2120
0G"
b1001 I"
1.
#2130
b10100 +
b10100 =
b10100 [
#2140
b11000 W
b11000 Z
b11000 `
b11000 \
b11000 ^
#2150
b1100 Y
b1100 a
b11 X
b11 b
b11 d
b11 5
b11 <
b11 V
b11 c
b11 ""
b1000000000110000000000000001 /
b1000000000110000000000000001 1
#2160
0.
#2170
b100100 ]
b100100 _
#2200
1.
#2210
b11000 +
b11000 =
b11000 [
#2220
b11100 W
b11100 Z
b11100 `
b11100 \
b11100 ^
#2230
b10000 Y
b10000 a
b100 X
b100 b
b100 d
b11 >
b100 5
b100 <
b100 V
b100 c
b11 K
b100 ""
b11000001000000000000000001 /
b11000001000000000000000001 1
#2240
b11111111 ?
b11111111 U
b11111111 e
b11111111 n
b11111111 q
b11111111 t
b11111111 v
b11111111 y
b10 <"
b10 >"
b1010 F
b1010 M
b1010 !"
b11111111 A
b11111111 P
b11111111 S
b1010 -
b1010 I
b1010 O
b1010 m
b1010 7"
0G
0*
1B
b1 J
b1 L
b1 f
0.
#2250
b1001 k
b1001 r
b11111111 g
b11111111 z
b0 I"
b11111111 i
b11111111 u
b101100 ]
b101100 _
#2260
b0 <"
b1000 F
b1000 M
b1000 !"
b1000 -
b1000 I
b1000 O
b1000 m
b1000 7"
b1000 l
b1000 o
#2270
b11110111 h
b11110111 x
#2280
1.
#2290
b1000 +"
b11100 +
b11100 =
b11100 [
#2300
b100000 W
b100000 Z
b100000 `
b100000 \
b100000 ^
#2310
b0 Y
b0 a
b0 X
b0 b
b0 d
b1011 >
b0 5
b100 :
b111 9
b111 E
b0 <
b0 V
b0 c
b1011 K
b0 ""
b100 $"
b111 &"
b111 T
b1011000000000000010000000111 /
b1011000000000000010000000111 1
#2320
b11 <"
b111 >"
b111 ;"
b11111111 F
b11111111 M
b11111111 !"
1J"
0D
0,
b111 ?
b111 U
b111 e
b111 n
b111 q
b111 t
b111 v
b111 y
b11111111 -
b11111111 I
b11111111 O
b11111111 m
b11111111 7"
1'
1@
b0 J
b0 L
b0 f
06
0.
#2329
b10 F"
09"
0="
#2330
b1 >"
b0 ;"
b111 F
b111 M
b111 !"
b1 F"
b111 -
b111 I
b111 O
b111 m
b111 7"
0C"
0A"
b0 @"
b1 k
b1 r
b1111 g
b1111 z
b111 i
b111 u
b100000 ]
b100000 _
b1000 (
b1000 8
b1000 j
b1000 p
b1000 s
b1000 w
b1000 {
b1000 #"
b1000 8"
b0 7
b0 R
b0 %"
b0 /"
#2339
1="
#2340
b0 A
b0 P
b0 S
b0 k
b0 r
b0 2
b0 Q
b0 0"
#2350
b1111 l
b1111 o
b111000 h
b111000 x
#2360
13"
1%
1D
1,
b1 &
b1 2"
b1 D"
1$
b1 F"
b1 H"
1.
#2400
0.
#2440
1.
#2480
0.
#2520
1.
#2560
0.
#2600
1.
#2640
0.
#2680
1.
#2720
0.
#2760
1.
#2800
0.
#2840
1.
#2880
0.
#2920
1.
#2960
0.
#3000
1.
#3040
0.
#3080
1.
#3120
0.
#3160
1.
#3200
0.
#3240
1.
#3280
0.
#3320
1.
#3360
0.
#3400
1.
#3440
0.
#3480
1.
#3520
0.
#3560
1.
#3600
0.
#3640
1.
#3680
0.
#3720
1.
#3760
0.
#3800
1.
#3840
0.
#3880
1.
#3920
0.
#3957
b11 F"
03"
0%
#3960
bx &
bx 2"
bx D"
0$
b0 F"
b11 H"
1.
#3980
0D
0,
19"
1C"
#4000
0.
#4040
b0 H"
1.
#4050
b100000 +
b100000 =
b100000 [
0J"
#4060
b100100 W
b100100 Z
b100100 `
b100100 \
b100100 ^
#4070
b10100 Y
b10100 a
b101 X
b101 b
b101 d
b1001 >
b101 5
b0 :
b101 <
b101 V
b101 c
b1001 K
b101 ""
b0 $"
b1001000001010000000000000111 /
b1001000001010000000000000111 1
#4080
b0 F
b0 M
b0 !"
1G"
0D
0,
1G
1*
0'
16
0.
#4090
1A"
b1000000000000000000000000000 @"
b111000 ]
b111000 _
b1001 (
b1001 8
b1001 j
b1001 p
b1001 s
b1001 w
b1001 {
b1001 #"
b1001 8"
#4100
b1000 F
b1000 M
b1000 !"
b1000 )
b1000 ;
b1000 N
b1000 ?"
b1000 I"
b1 k
b1 r
#4110
b10000 l
b10000 o
#4120
0G"
b111111 h
b111111 x
1.
#4130
b1000 ,"
b100100 +
b100100 =
b100100 [
#4140
b101000 W
b101000 Z
b101000 `
b101000 \
b101000 ^
#4150
b11000 Y
b11000 a
b110 X
b110 b
b110 d
b100000 ?
b100000 U
b100000 e
b100000 n
b100000 q
b100000 t
b100000 v
b100000 y
b110 5
b0 9
b100000 E
b110 <
b110 V
b110 c
b110 ""
b0 &"
b100000 T
b1001000001100000000000100000 /
b1001000001100000000000100000 1
#4160
b0 <"
b0 >"
b1 ;"
b100000 -
b100000 I
b100000 O
b100000 m
b100000 7"
b0 k
b0 r
b101001 g
b101001 z
b100000 i
b100000 u
0.
#4169
b10 F"
09"
0="
#4170
b0 I"
b1000000 ]
b1000000 _
b101001 l
b101001 o
b1001 7
b1001 R
b1001 %"
b1001 /"
#4180
b11110111 A
b11110111 P
b11110111 S
b11110111 2
b11110111 Q
b11110111 0"
b100000 h
b100000 x
#4200
15"
1%
1D
1,
b1000000000000000000000000000 !
b1000000000000000000000000000 1"
b1000000000000000000000000000 E"
b0 &
b0 2"
b0 D"
1"
b10 F"
b10 H"
1.
#4210
b1000 -"
#4240
0.
#4280
1.
#4320
0.
#4360
1.
#4400
0.
#4440
1.
#4480
0.
#4520
1.
#4560
0.
#4600
1.
#4640
0.
#4680
1.
#4720
0.
#4760
1.
#4800
0.
#4840
1.
#4880
0.
#4920
1.
#4960
0.
#5000
1.
#5040
0.
#5080
1.
#5120
0.
#5160
1.
#5200
0.
#5240
1.
#5280
0.
#5320
1.
#5360
0.
#5400
1.
#5440
0.
#5480
1.
#5520
0.
#5560
1.
#5600
0.
#5640
1.
#5680
0.
#5720
1.
#5760
0.
#5797
b1 F"
05"
0%
#5800
13"
1%
bx !
bx 1"
bx E"
b1000 &
b1000 2"
b1000 D"
0"
1$
b1 F"
b1 H"
1.
#5840
0.
#5880
1.
#5920
0.
#5960
1.
#6000
0.
#6040
1.
#6080
0.
#6120
1.
#6160
0.
#6200
1.
#6240
0.
#6280
1.
#6320
0.
#6360
1.
#6400
0.
#6440
1.
#6480
0.
#6520
1.
#6560
0.
#6600
1.
#6640
0.
#6680
1.
#6720
0.
#6760
1.
#6800
0.
#6840
1.
#6880
0.
#6920
1.
#6960
0.
#7000
1.
#7040
0.
#7080
1.
#7120
0.
#7160
1.
#7200
0.
#7240
1.
#7280
0.
#7320
1.
#7360
0.
#7397
b11 F"
03"
0%
#7400
bx &
bx 2"
bx D"
0$
b0 F"
b11 H"
1.
#7440
0.
#7480
0D
0,
b10 F"
b0 H"
1.
#7490
b101000 +
b101000 =
b101000 [
#7500
b101100 W
b101100 Z
b101100 `
b101100 \
b101100 ^
#7510
b0 Y
b0 a
b0 X
b0 b
b0 d
b1011 >
b0 5
b100 :
b0 <
b0 V
b0 c
b1011 K
b0 ""
b100 $"
b1011000000000000010000100000 /
b1011000000000000010000100000 1
#7520
b100000 F
b100000 M
b100000 !"
1J"
1D
1,
0G
0*
1'
06
0.
#7530
b1 F"
0D
0,
0A"
b1 B"
b0 @"
b101100 ]
b101100 _
b1000 (
b1000 8
b1000 j
b1000 p
b1000 s
b1000 w
b1000 {
b1000 #"
b1000 8"
#7539
b0 F"
19"
1="
#7540
b101000 g
b101000 z
#7550
b101000 l
b101000 o
#7560
b0 h
b0 x
1.
#7570
b101100 +
b101100 =
b101100 [
0J"
#7580
b110000 W
b110000 Z
b110000 `
b110000 \
b110000 ^
#7590
bx ?
bx U
bx e
bx n
bx q
bx t
bx v
bx y
bx >
bx 5
bx :
bx 9
bx E
bx <
bx V
bx c
bx K
bx ""
bx $"
bx &"
bx T
bx /
bx 1
#7600
b1xxx00 W
b1xxx00 Z
b1xxx00 `
bx <"
bx >"
bx ;"
bx F
bx M
bx !"
xJ"
xG"
0D
0,
x3
bx -
bx I
bx O
bx m
bx 7"
b0x000 k
b0x000 r
bx1xxx g
bx1xxx z
xG
x*
x'
xH
xC
x6
bx i
bx u
0.
#7609
x9"
x="
#7610
bx l
bx o
bx (
bx 8
bx j
bx p
bx s
bx w
bx {
bx #"
bx 8"
bx 7
bx R
bx %"
bx /"
#7620
bx A
bx P
bx S
bx g
bx z
bx k
bx r
bx 2
bx Q
bx 0"
bx h
bx x
#7640
1.
#7650
b1xxx00 +
b1xxx00 =
b1xxx00 [
#7660
bx W
bx Z
bx `
bx \
bx ^
#7680
0.
#7720
1.
#7730
bx +
bx =
bx [
#7760
0.
#7800
1.
#7840
0.
#7880
1.
#7920
0.
#7960
1.
#8000
0.
#8040
1.
#8080
0.
#8120
1.
#8160
0.
#8200
1.
#8240
0.
#8280
1.
#8320
0.
#8360
1.
#8400
0.
#8440
1.
#8480
0.
#8520
1.
#8560
0.
#8600
1.
#8640
0.
#8680
1.
#8720
0.
#8760
1.
#8800
0.
#8840
1.
#8880
0.
#8920
1.
#8960
0.
#9000
1.
#9040
0.
#9080
1.
#9120
0.
#9160
1.
#9200
0.
#9240
1.
#9280
0.
#9320
1.
#9360
0.
#9400
1.
#9440
0.
#9480
1.
#9520
0.
#9560
1.
#9600
0.
#9640
1.
#9680
0.
#9720
1.
#9760
0.
#9800
1.
#9840
0.
#9880
1.
#9920
0.
#9960
1.
#10000
0.
#10040
1.
#10080
0.
#10120
1.
#10160
0.
#10200
1.
#10240
0.
#10280
1.
#10320
0.
#10360
1.
#10400
0.
#10440
1.
#10480
0.
#10520
1.
#10560
0.
#10600
1.
#10640
0.
#10680
1.
#10720
0.
#10760
1.
#10800
0.
#10840
1.
#10880
0.
#10920
1.
#10960
0.
#11000
1.
#11040
0.
#11080
1.
#11120
0.
#11160
1.
#11200
0.
#11240
1.
#11280
0.
#11320
1.
#11360
0.
#11400
1.
#11440
0.
#11480
1.
#11520
0.
#11560
1.
#11600
0.
#11640
1.
#11680
0.
#11720
1.
#11760
0.
#11800
1.
#11840
0.
#11880
1.
#11920
0.
#11960
1.
#12000
0.
#12040
1.
#12060
